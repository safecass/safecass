===== g2log =====

On MAC:
    - g2log/src/crashhandler_unix.cpp: MAC => include <sys/ucontext.h> instead of <ucontext.h>
    - g2log/CMakeLists.txt: comment out "set(PLATFORM_LINK_LIBRIES rt)"

CMAKE_CXX_FLAGS needs to include "-std=c++11" option which is not supported by cisst and thus
conflicts with cisstCommon as follows:

    /Users/MJ/project/fault/cisst/cisstCommon/cmnTypeTraits.h:421:12: error: 'isnan' was not declared in this scope

    According to http://en.cppreference.com/w/cpp/numeric/math/isnan,
    #include <cmath> would resolve this problem but there should be a way to recognize
    c++11 support or not.  For this, refer to http://pageant.ghulbus.eu/?p=664

    patch for cisst:
    Index: cisst/cisstCommon/cmnPortability.h
    ===================================================================
    --- cisst/cisstCommon/cmnPortability.h  (revision 3692)
    +++ cisst/cisstCommon/cmnPortability.h  (working copy)
    @@ -385,7 +385,9 @@
           extern "C" int isnan (double);
                #endif
              #endif
           -  #define CMN_ISNAN(x) isnan(x)
    +  #include <cmath>
    +  //#define CMN_ISNAN(x) isnan(x)
    +  #define CMN_ISNAN(x) std::isnan(x)
     #endif


Cubism:
    WebSocket support: For compatibly tests I use 
    http://www.tavendo.de/autobahn/testsuite.html
    and
    http://websocket.org/echo.html

Cube:
    https://github.com/square/cube/wiki/Collector

MongoDB
MongoHub

How to run visualization framework (Cube/Cubism):
    1) Run MongoDB:
        # cd /Users/MJ/project/tools/mongodb-osx-x86_64-2.0.7 
        # mongodb-osx-x86_64-2.0.7$ bin/mongod --dbpath data/db (make -p data/db)
    2) MongoHub or console-based Mongo
        - Create cube_development database
    3) Install Cube:
        # cd ~/project/tools/
        # npm install cube (requires node js from http://nodejs.org)
    3) Run Cube:
        A) Collector:
        # cd /Users/MJ/project/tools/node_modules/cube
        # node bin/collector (<-- check bin/collector-config.js)
        B) Evaluator:
        # cd /Users/MJ/project/tools/node_modules/cube
        # node bin/evaluator (<-- check bin/evaluator-config.js)
    4) Generate test data (random)
        # cd /Users/MJ/project/tools/node_modules/cube/examples/random-emitter
        - edit random-config.js to configure parameters
        # node random-emitter.js
        - Data set can be viewed using mongo console-based tool
            # cd /Users/MJ/project/tools/mongodb-osx-x86_64-2.0.7/bin
            # ./mongo
            > show dbs
            > use cube_development
            > db.random_events.find()
    5) Run HTML Cubism Demo:
        # open file:///Users/MJ/project/tools/node_modules/cube/static/random/index.html?step=1e4
